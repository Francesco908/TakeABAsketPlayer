-- Servizi
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Caricamento della libreria Fluent
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Creazione della finestra Fluent
local Window = Fluent:CreateWindow({
    Title = "Take a Basket Player",
    SubTitle = "Loader",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Istruzioni per l'utente
Tabs.Main:AddParagraph({
    Title = "Istruzioni",
    Content = "Clicca il pulsante 'Carica Script' per caricare lo script da GitHub. Se fallisce, puoi incollare il codice dello script nel campo qui sotto e premere Invio per eseguirlo."
})

-- Pulsante per caricare lo script da GitHub
Tabs.Main:AddButton({
    Title = "Carica Script",
    Description = "Carica lo script Take a Basket Player da GitHub",
    Callback = function()
        local url = "https://raw.githubusercontent.com/Francesco908/TakeABAsketPlayer/main/BASKET.lua"
        local success, result = pcall(function()
            return loadstring(game:HttpGet(url))()
        end)
        if success then
            Fluent:Notify({
                Title = "Successo",
                Content = "Script caricato con successo!",
                Duration = 5
            })
        else
            Fluent:Notify({
                Title = "Errore",
                Content = "Impossibile caricare lo script: " .. tostring(result),
                Duration = 5
            })
        end
    end
})

-- Campo di input per incollare lo script manualmente
Tabs.Main:AddInput("ScriptInput", {
    Title = "Incolla Script",
    Default = "",
    Placeholder = "Incolla qui il codice dello script",
    Numeric = false,
    Finished = true,
    Callback = function(value)
        local success, result = pcall(function()
            return loadstring(value)()
        end)
        if success then
            Fluent:Notify({
                Title = "Successo",
                Content = "Script eseguito con successo!",
                Duration = 5
            })
        else
            Fluent:Notify({
                Title = "Errore",
                Content = "Impossibile eseguire lo script: " .. tostring(result),
                Duration = 5
            })
        end
    end
})

-- Creazione del pulsante flottante
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "LoaderGUI"
ScreenGui.Parent = PlayerGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false

local OpenButton = Instance.new("ImageButton")
OpenButton.Name = "OpenButton"
OpenButton.Parent = ScreenGui
OpenButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
OpenButton.BorderSizePixel = 0
OpenButton.Position = UDim2.new(0, 20, 0.5, -35)
OpenButton.Size = UDim2.new(0, 70, 0, 70)
OpenButton.Image = "rbxassetid://6034684930"
OpenButton.BackgroundTransparency = 0.3
OpenButton.ImageTransparency = 0.1
OpenButton.AutoButtonColor = true

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0.3, 0)
UICorner.Parent = OpenButton

-- Logica per rendere il pulsante trascinabile
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    OpenButton.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

OpenButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = OpenButton.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

OpenButton.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Rotazione per effetto visivo
spawn(function()
    local rotation = 0
    while OpenButton and OpenButton.Parent do
        rotation = (rotation + 1.2) % 360
        OpenButton.Rotation = rotation
        RunService.RenderStepped:Wait()
    end
end)

-- Attivazione/disattivazione della finestra Fluent
OpenButton.MouseButton1Click:Connect(function()
    if Window.ScreenGui then
        Window.ScreenGui.Enabled = not Window.ScreenGui.Enabled
    else
        -- Se Window.ScreenGui non è accessibile, cerca la ScreenGui di Fluent
        for _, gui in pairs(PlayerGui:GetChildren()) do
            if gui:IsA("ScreenGui") and gui.Name:find("Fluent") then
                gui.Enabled = not gui.Enabled
                break
            end
        end
    end
end)

-- Seleziona la prima scheda
Window:SelectTab(1)

-- Notifica di inizializzazione
Fluent:Notify({
    Title = "Take a Basket Player",
    Content = "Il loader è stato inizializzato.",
    Duration = 5
})
