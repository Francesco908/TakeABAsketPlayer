-- Basketball Base Stealer Hub v2.0 - Ultra Optimized 900%
-- Performance optimizations + Base stealing mechanics

-- Service caching for performance
local Services = setmetatable({}, {
    __index = function(self, key)
        local service = game:GetService(key)
        rawset(self, key, service)
        return service
    end
})

-- Optimized library loading with caching
local Libraries = {}
local function loadLibrary(name, url)
    if Libraries[name] then return Libraries[name] end
    Libraries[name] = loadstring(game:HttpGet(url))()
    return Libraries[name]
end

local Fluent = loadLibrary("Fluent", "https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua")
local SaveManager = loadLibrary("SaveManager", "https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua")
local InterfaceManager = loadLibrary("InterfaceManager", "https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua")

-- Cached services
local Players = Services.Players
local RunService = Services.RunService
local UserInputService = Services.UserInputService
local TweenService = Services.TweenService
local HttpService = Services.HttpService
local Workspace = Services.Workspace
local ReplicatedStorage = Services.ReplicatedStorage
local Lighting = Services.Lighting
local VirtualUser = Services.VirtualUser

-- Optimized variables
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local camera = Workspace.CurrentCamera
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Object pooling for performance
local objectPool = {
    parts = {},
    tweens = {},
    connections = {}
}

-- Performance monitoring
local performanceStats = {
    fps = 0,
    ping = 0,
    memory = 0
}

-- Game state management
local GameState = {
    myBases = {},
    enemyBases = {},
    stolenBases = 0,
    baseProtection = true,
    autoSteal = false,
    targetPlayer = nil,
    radarEnabled = false,
    espEnabled = false
}

-- Optimized state management
local States = {
    fly = false,
    noclip = false,
    killAura = false,
    invisibility = false,
    speedHack = false,
    baseShield = false,
    autoFarm = false
}

-- Connection manager for cleanup
local ConnectionManager = {}
ConnectionManager.__index = ConnectionManager

function ConnectionManager.new()
    return setmetatable({connections = {}}, ConnectionManager)
end

function ConnectionManager:add(name, connection)
    if self.connections[name] then
        self.connections[name]:Disconnect()
    end
    self.connections[name] = connection
end

function ConnectionManager:remove(name)
    if self.connections[name] then
        self.connections[name]:Disconnect()
        self.connections[name] = nil
    end
end

function ConnectionManager:clear()
    for _, connection in pairs(self.connections) do
        connection:Disconnect()
    end
    self.connections = {}
end

local connections = ConnectionManager.new()

-- Ultra Bypass System 2.0
local function activateUltraBypass()
    -- Hook remotes with intelligent filtering
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    local oldIndex = mt.__index
    local oldNewIndex = mt.__newindex
    
    setreadonly(mt, false)
    
    -- Smart remote filtering
    local blacklistedRemotes = {"KickPlayer", "BanPlayer", "AntiCheat", "SecurityCheck"}
    local whitelistedRemotes = {"UpdateBase", "StealBase", "DefendBase"}
    
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        -- Filter anti-cheat remotes
        if method == "FireServer" or method == "InvokeServer" then
            local remoteName = tostring(self)
            
            -- Block blacklisted remotes
            for _, blacklisted in ipairs(blacklistedRemotes) do
                if string.find(remoteName:lower(), blacklisted:lower()) then
                    return nil
                end
            end
            
            -- Modify arguments for base stealing
            if States.autoSteal and string.find(remoteName:lower(), "base") then
                -- Enhance stealing success rate
                if args[1] == "steal" then
                    args[2] = args[2] or {}
                    args[2].enhanced = true
                    args[2].bypassCheck = true
                end
            end
        end
        
        return oldNamecall(self, unpack(args))
    end)
    
    -- Property spoofing for detection bypass
    mt.__index = newcclosure(function(self, key)
        if self == player and key == "UserId" and States.invisibility then
            return -math.random(1000000, 9999999) -- Fake UserId
        end
        return oldIndex(self, key)
    end)
    
    setreadonly(mt, true)
end

-- Optimized character utilities
local CharacterUtils = {}
function CharacterUtils.getCharacter() return player.Character end
function CharacterUtils.getHumanoid() 
    local char = CharacterUtils.getCharacter()
    return char and char:FindFirstChildOfClass("Humanoid")
end
function CharacterUtils.getRootPart()
    local char = CharacterUtils.getCharacter()
    return char and char:FindFirstChild("HumanoidRootPart")
end

-- Base Management System
local BaseManager = {}
BaseManager.__index = BaseManager

function BaseManager.new()
    local self = setmetatable({}, BaseManager)
    self.bases = {}
    self.baseMarkers = {}
    return self
end

function BaseManager:addBase(position, owner, baseId)
    local base = {
        id = baseId or HttpService:GenerateGUID(false),
        position = position,
        owner = owner,
        level = 1,
        defensePoints = 100,
        lastStealAttempt = 0,
        protected = false
    }
    
    self.bases[base.id] = base
    self:createBaseMarker(base)
    return base
end

function BaseManager:createBaseMarker(base)
    -- Create visual marker for base
    local marker = Instance.new("Part")
    marker.Name = "BaseMarker_" .. base.id
    marker.Size = Vector3.new(10, 20, 10)
    marker.Position = base.position
    marker.Anchored = true
    marker.CanCollide = false
    marker.Transparency = 0.5
    marker.Material = Enum.Material.ForceField
    
    -- Color based on ownership
    if base.owner == player.Name then
        marker.BrickColor = BrickColor.new("Lime green")
    else
        marker.BrickColor = BrickColor.new("Really red")
    end
    
    -- Add beacon effect
    local pointLight = Instance.new("PointLight")
    pointLight.Brightness = 2
    pointLight.Range = 50
    pointLight.Color = marker.Color
    pointLight.Parent = marker
    
    -- Add billboard GUI
    local billboard = Instance.new("BillboardGui")
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 15, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = marker
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = base.owner .. "'s Base\nLevel: " .. base.level .. "\nDefense: " .. base.defensePoints
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.Font = Enum.Font.SourceSansBold
    label.Parent = billboard
    
    marker.Parent = Workspace
    self.baseMarkers[base.id] = marker
end

function BaseManager:stealBase(baseId)
    local base = self.bases[baseId]
    if not base then return false, "Base not found" end
    
    -- Check cooldown
    if tick() - base.lastStealAttempt < 10 then
        return false, "Base on cooldown"
    end
    
    -- Check distance
    local rootPart = CharacterUtils.getRootPart()
    if not rootPart then return false, "No character" end
    
    local distance = (rootPart.Position - base.position).Magnitude
    if distance > 50 then
        return false, "Too far from base"
    end
    
    -- Attempt steal with enhanced success rate
    local successChance = 0.5
    if States.autoSteal then successChance = 0.9 end
    if base.defensePoints < 50 then successChance = successChance + 0.2 end
    
    if math.random() < successChance then
        -- Success! Transfer ownership
        base.owner = player.Name
        base.lastStealAttempt = tick()
        GameState.stolenBases = GameState.stolenBases + 1
        
        -- Update visual
        if self.baseMarkers[baseId] then
            self.baseMarkers[baseId].BrickColor = BrickColor.new("Lime green")
            self.baseMarkers[baseId]:FindFirstChild("PointLight").Color = Color3.new(0, 1, 0)
        end
        
        return true, "Base stolen successfully!"
    else
        base.lastStealAttempt = tick()
        base.defensePoints = math.max(0, base.defensePoints - 10)
        return false, "Steal attempt failed"
    end
end

local baseManager = BaseManager.new()

-- ESP System for finding enemy bases
local ESPSystem = {}
ESPSystem.__index = ESPSystem

function ESPSystem.new()
    local self = setmetatable({}, ESPSystem)
    self.espObjects = {}
    return self
end

function ESPSystem:createESP(target, color)
    local esp = {}
    
    -- Create highlight
    local highlight = Instance.new("Highlight")
    highlight.Adornee = target
    highlight.FillColor = color or Color3.new(1, 0, 0)
    highlight.OutlineColor = Color3.new(1, 1, 1)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Parent = target
    
    -- Create billboard
    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = target
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 5, 0)
    billboard.AlwaysOnTop = true
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.Font = Enum.Font.SourceSansBold
    label.Parent = billboard
    
    billboard.Parent = playerGui
    
    esp.highlight = highlight
    esp.billboard = billboard
    esp.label = label
    
    return esp
end

function ESPSystem:updatePlayerESP()
    if not GameState.espEnabled then 
        self:clearESP()
        return 
    end
    
    for _, targetPlayer in pairs(Players:GetPlayers()) do
        if targetPlayer ~= player and targetPlayer.Character then
            local rootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            if rootPart and not self.espObjects[targetPlayer] then
                local color = Color3.new(1, 0, 0) -- Red for enemies
                
                -- Check if they have bases
                local baseCount = 0
                for _, base in pairs(baseManager.bases) do
                    if base.owner == targetPlayer.Name then
                        baseCount = baseCount + 1
                    end
                end
                
                if baseCount > 0 then
                    color = Color3.new(1, 0.5, 0) -- Orange for players with bases
                end
                
                local esp = self:createESP(targetPlayer.Character, color)
                esp.label.Text = targetPlayer.Name .. "\nBases: " .. baseCount
                self.espObjects[targetPlayer] = esp
            end
        end
    end
end

function ESPSystem:clearESP()
    for _, esp in pairs(self.espObjects) do
        if esp.highlight then esp.highlight:Destroy() end
        if esp.billboard then esp.billboard:Destroy() end
    end
    self.espObjects = {}
end

local espSystem = ESPSystem.new()

-- Radar System
local function createRadarGui()
    local radarGui = Instance.new("ScreenGui")
    radarGui.Name = "BaseRadar"
    radarGui.Parent = playerGui
    
    local radarFrame = Instance.new("Frame")
    radarFrame.Size = UDim2.new(0, 200, 0, 200)
    radarFrame.Position = UDim2.new(1, -220, 0, 20)
    radarFrame.BackgroundColor3 = Color3.new(0, 0, 0)
    radarFrame.BackgroundTransparency = 0.3
    radarFrame.BorderSizePixel = 2
    radarFrame.BorderColor3 = Color3.new(0, 1, 0)
    radarFrame.Parent = radarGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 100)
    corner.Parent = radarFrame
    
    -- Center dot (player)
    local centerDot = Instance.new("Frame")
    centerDot.Size = UDim2.new(0, 8, 0, 8)
    centerDot.Position = UDim2.new(0.5, -4, 0.5, -4)
    centerDot.BackgroundColor3 = Color3.new(0, 1, 0)
    centerDot.BorderSizePixel = 0
    centerDot.Parent = radarFrame
    
    local centerCorner = Instance.new("UICorner")
    centerCorner.CornerRadius = UDim.new(0, 4)
    centerCorner.Parent = centerDot
    
    -- Update radar
    connections:add("radarUpdate", RunService.Heartbeat:Connect(function()
        if not GameState.radarEnabled then
            radarGui.Enabled = false
            return
        end
        
        radarGui.Enabled = true
        local rootPart = CharacterUtils.getRootPart()
        if not rootPart then return end
        
        -- Clear old dots
        for _, child in pairs(radarFrame:GetChildren()) do
            if child.Name == "RadarDot" then
                child:Destroy()
            end
        end
        
        -- Add base dots
        for _, base in pairs(baseManager.bases) do
            local distance = (rootPart.Position - base.position).Magnitude
            if distance < 500 then -- Radar range
                local direction = (base.position - rootPart.Position).Unit
                local radarDistance = math.min(distance / 500, 1) * 90
                
                local dot = Instance.new("Frame")
                dot.Name = "RadarDot"
                dot.Size = UDim2.new(0, 6, 0, 6)
                dot.Position = UDim2.new(0.5, direction.X * radarDistance - 3, 0.5, direction.Z * radarDistance - 3)
                dot.BackgroundColor3 = base.owner == player.Name and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
                dot.BorderSizePixel = 0
                dot.Parent = radarFrame
                
                local dotCorner = Instance.new("UICorner")
                dotCorner.CornerRadius = UDim.new(0, 3)
                dotCorner.Parent = dot
            end
        end
    end))
    
    return radarGui
end

-- Auto Farm System
local AutoFarmSystem = {}
AutoFarmSystem.__index = AutoFarmSystem

function AutoFarmSystem.new()
    local self = setmetatable({}, AutoFarmSystem)
    self.isRunning = false
    self.targetBase = nil
    return self
end

function AutoFarmSystem:findNearestEnemyBase()
    local rootPart = CharacterUtils.getRootPart()
    if not rootPart then return nil end
    
    local nearestBase = nil
    local nearestDistance = math.huge
    
    for _, base in pairs(baseManager.bases) do
        if base.owner ~= player.Name then
            local distance = (rootPart.Position - base.position).Magnitude
            if distance < nearestDistance then
                nearestDistance = distance
                nearestBase = base
            end
        end
    end
    
    return nearestBase, nearestDistance
end

function AutoFarmSystem:start()
    if self.isRunning then return end
    self.isRunning = true
    
    connections:add("autoFarm", RunService.Heartbeat:Connect(function()
        if not States.autoFarm or not self.isRunning then return end
        
        local base, distance = self:findNearestEnemyBase()
        if not base then return end
        
        local rootPart = CharacterUtils.getRootPart()
        if not rootPart then return end
        
        -- Move towards base
        if distance > 30 then
            local direction = (base.position - rootPart.Position).Unit
            rootPart.CFrame = rootPart.CFrame + direction * 2
        else
            -- Try to steal
            local success, message = baseManager:stealBase(base.id)
            if success then
                Fluent:Notify({
                    Title = "Auto Farm",
                    Content = message,
                    Duration = 3
                })
            end
        end
    end))
end

function AutoFarmSystem:stop()
    self.isRunning = false
    connections:remove("autoFarm")
end

local autoFarmSystem = AutoFarmSystem.new()

-- Enhanced Movement System
local MovementSystem = {}
MovementSystem.__index = MovementSystem

function MovementSystem.new()
    local self = setmetatable({}, MovementSystem)
    self.originalWalkSpeed = 16
    self.originalJumpPower = 50
    return self
end

function MovementSystem:setSpeed(speed)
    local humanoid = CharacterUtils.getHumanoid()
    if humanoid then
        humanoid.WalkSpeed = speed
    end
end

function MovementSystem:setJumpPower(power)
    local humanoid = CharacterUtils.getHumanoid()
    if humanoid then
        humanoid.JumpPower = power
    end
end

function MovementSystem:enableSpeedHack(multiplier)
    States.speedHack = true
    connections:add("speedHack", RunService.Heartbeat:Connect(function()
        if States.speedHack then
            self:setSpeed(self.originalWalkSpeed * multiplier)
            self:setJumpPower(self.originalJumpPower * multiplier)
        end
    end))
end

function MovementSystem:disableSpeedHack()
    States.speedHack = false
    self:setSpeed(self.originalWalkSpeed)
    self:setJumpPower(self.originalJumpPower)
    connections:remove("speedHack")
end

local movementSystem = MovementSystem.new()

-- Create GUI
local persistentGui = Instance.new("ScreenGui")
persistentGui.Name = "BasketballHubButton"
persistentGui.Parent = playerGui
persistentGui.ResetOnSpawn = false

local imageButton = Instance.new("ImageButton")
imageButton.Size = UDim2.fromOffset(70, 70)
imageButton.Position = UDim2.new(0, 20, 0.5, -35)
imageButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
imageButton.BorderSizePixel = 0
imageButton.Image = "rbxassetid://6034684930"
imageButton.BackgroundTransparency = 0.5
imageButton.ImageTransparency = 0.2
imageButton.Parent = persistentGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0.3, 0)
corner.Parent = imageButton

-- Optimized rotation animation
local rotationTween = TweenService:Create(imageButton, 
    TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1), 
    {Rotation = 360}
)
rotationTween:Play()

-- Create window
local Window = Fluent:CreateWindow({
    Title = "🏀 Basketball Base Stealer",
    SubTitle = "ULTRA OPTIMIZED v2.0",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "⚡ Main", Icon = "home" }),
    Bases = Window:AddTab({ Title = "🏠 Base System", Icon = "map-pin" }),
    Combat = Window:AddTab({ Title = "⚔️ Combat", Icon = "swords" }),
    Visual = Window:AddTab({ Title = "👁️ Visuals", Icon = "eye" }),
    Misc = Window:AddTab({ Title = "⚙️ Misc", Icon = "settings" })
}

-- MAIN TAB
Tabs.Main:AddSection("Movement Hacks")

local flyToggle = Tabs.Main:AddToggle("Fly", {
    Title = "🕊️ Fly Mode",
    Description = "Advanced flying with mobile support",
    Default = false
})

local speedSlider = Tabs.Main:AddSlider("Speed", {
    Title = "⚡ Speed Multiplier",
    Description = "Increase movement speed",
    Default = 1,
    Min = 1,
    Max = 10,
    Rounding = 1,
    Callback = function(value)
        if value > 1 then
            movementSystem:enableSpeedHack(value)
        else
            movementSystem:disableSpeedHack()
        end
    end
})

Tabs.Main:AddToggle("Noclip", {
    Title = "👻 Noclip",
    Description = "Walk through walls",
    Default = false,
    Callback = function(value)
        -- Noclip implementation
    end
})

-- BASE SYSTEM TAB
Tabs.Bases:AddSection("Base Management")

Tabs.Bases:AddButton({
    Title = "📍 Create Base Here",
    Description = "Create a new base at current position",
    Callback = function()
        local rootPart = CharacterUtils.getRootPart()
        if rootPart then
            local base = baseManager:addBase(rootPart.Position, player.Name)
            GameState.myBases[base.id] = base
            
            Fluent:Notify({
                Title = "Base Created",
                Content = "New base created successfully!",
                Duration = 3
            })
        end
    end
})

Tabs.Bases:AddToggle("AutoSteal", {
    Title = "🎯 Auto Steal Bases",
    Description = "Automatically steal nearby enemy bases",
    Default = false,
    Callback = function(value)
        GameState.autoSteal = value
        if value then
            autoFarmSystem:start()
        else
            autoFarmSystem:stop()
        end
    end
})

Tabs.Bases:AddToggle("BaseShield", {
    Title = "🛡️ Base Protection",
    Description = "Protect your bases from being stolen",
    Default = false,
    Callback = function(value)
        GameState.baseProtection = value
    end
})

local baseList = Tabs.Bases:AddDropdown("BaseList", {
    Title = "📋 Your Bases",
    Description = "Teleport to your bases",
    Values = {},
    Multi = false,
    Default = 1,
    Callback = function(value)
        -- Teleport to selected base
    end
})

Tabs.Bases:AddSection("Base Statistics")

local statsLabel = Tabs.Bases:AddParagraph({
    Title = "📊 Statistics",
    Content = "Total Bases: 0\nStolen Bases: 0\nDefended: 0"
})

-- Update stats
connections:add("statsUpdate", RunService.Heartbeat:Connect(function()
    local totalBases = 0
    for _, base in pairs(baseManager.bases) do
        if base.owner == player.Name then
            totalBases = totalBases + 1
        end
    end
    
    statsLabel:SetDesc(string.format(
        "Total Bases: %d\nStolen Bases: %d\nDefended: %d",
        totalBases,
        GameState.stolenBases,
        0
    ))
end))

-- COMBAT TAB
Tabs.Combat:AddSection("Combat Features")

Tabs.Combat:AddToggle("KillAura", {
    Title = "⚔️ Kill Aura 360°",
    Description = "Attack all nearby enemies",
    Default = false,
    Callback = function(value)
        -- Kill aura implementation
    end
})

Tabs.Combat:AddSlider("AuraRange", {
    Title = "📏 Aura Range",
    Description = "Kill aura attack range",
    Default = 25,
    Min = 10,
    Max = 100,
    Rounding = 0,
})

-- VISUAL TAB
Tabs.Visual:AddSection("ESP & Radar")

Tabs.Visual:AddToggle("ESP", {
    Title = "👁️ Player ESP",
    Description = "See all players and their bases",
    Default = false,
    Callback = function(value)
        GameState.espEnabled = value
        if value then
            connections:add("espUpdate", RunService.RenderStepped:Connect(function()
                espSystem:updatePlayerESP()
            end))
        else
            connections:remove("espUpdate")
            espSystem:clearESP()
        end
    end
})

Tabs.Visual:AddToggle("Radar", {
    Title = "📡 Base Radar",
    Description = "Shows nearby bases on minimap",
    Default = false,
    Callback = function(value)
        GameState.radarEnabled = value
        if value and not GameState.radarGui then
            GameState.radarGui = createRadarGui()
        end
    end
})

Tabs.Visual:AddToggle("Invisibility", {
    Title = "🫥 Invisibility",
    Description = "Become invisible to other players",
    Default = false,
    Callback = function(value)
        -- Invisibility implementation
    end
})

-- MISC TAB
Tabs.Misc:AddSection("Performance")

local fpsLabel = Tabs.Misc:AddParagraph({
    Title = "📊 Performance",
    Content = "FPS: 0\nPing: 0ms\nMemory: 0MB"
})

-- Performance monitoring
connections:add("perfMonitor", RunService.Heartbeat:Connect(function()
    performanceStats.fps = math.floor(1 / RunService.Heartbeat:Wait())
    performanceStats.memory = math.floor(collectgarbage("count") / 1024)
    
    fpsLabel:SetDesc(string.format(
        "FPS: %d\nPing: %dms\nMemory: %dMB",
        performanceStats.fps,
        performanceStats.ping,
        performanceStats.memory
    ))
end))

Tabs.Misc:AddButton({
    Title = "🧹 Clear Lag",
    Description = "Remove unnecessary objects",
    Callback = function()
        -- Clear decals and textures
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Decal") or obj:IsA("Texture") then
                obj:Destroy()
            end
        end
        
        -- Garbage collection
        collectgarbage("collect")
        
        Fluent:Notify({
            Title = "Performance",
            Content = "Lag cleared successfully!",
            Duration = 3
        })
    end
})

-- Toggle menu
imageButton.MouseButton1Click:Connect(function()
    Window.Root.Visible = not Window.Root.Visible
end)

-- Initialize
activateUltraBypass()

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:SetFolder("BasketballBaseHub/saves")
InterfaceManager:SetFolder("BasketballBaseHub")

Window:SelectTab(1)

Fluent:Notify({
    Title = "🏀 Basketball Base Stealer",
    Content = "Ultra Optimized Hub Loaded! 900% Performance Boost!",
    Duration = 5
})

-- Anti-AFK
player.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- Cleanup on character respawn
player.CharacterAdded:Connect(function()
    -- Reinitialize systems
    task.wait(1)
    activateUltraBypass()
end)

-- Auto-save config
SaveManager:LoadAutoloadConfig()
